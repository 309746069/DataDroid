/**
 * 2011 Foxykeep (http://datadroid.foxykeep.com)
 * <p>
 * Licensed under the Beerware License : <br />
 * As long as you retain this notice you can do whatever you want with this stuff. If we meet some
 * day, and you think this stuff is worth it, you can buy me a beer in return
 */

package com.foxykeep.datadroidpoc.data.requestmanager;

import android.content.Context;
import android.os.Bundle;

import com.foxykeep.datadroid.requestmanager.Request;
import com.foxykeep.datadroid.requestmanager.RequestManager;
import com.foxykeep.datadroidpoc.data.memprovider.MemoryProvider;
import com.foxykeep.datadroidpoc.data.service.PoCService;
import com.foxykeep.datadroidpoc.data.worker.CrudSyncPhoneAddEditOperation;
import com.foxykeep.datadroidpoc.data.worker.CrudSyncPhoneDeleteOperation;
import com.foxykeep.datadroidpoc.data.worker.CrudSyncPhoneListOperation;
import com.foxykeep.datadroidpoc.data.worker.PersonListOperation;
import com.foxykeep.datadroidpoc.data.worker.RssFeedOperation;

/**
 * This class is used as a proxy to call the Service. It provides easy-to-use methods to call the
 * service and manages the Intent creation. It also assures that a request will not be sent again if
 * an exactly identical one is already in progress.
 *
 * @author Foxykeep
 */
public final class PoCRequestManager extends RequestManager {

    // Singleton management
    private static PoCRequestManager sInstance;

    public static PoCRequestManager from(final Context context) {
        if (sInstance == null) {
            sInstance = new PoCRequestManager(context);
        }

        return sInstance;
    }

    public static final String RECEIVER_EXTRA_CITY_LIST = "com.foxykeep.datadroidpoc.extras.cityList";
    public static final String RECEIVER_EXTRA_PHONE_LIST = "com.foxykeep.datadroidpoc.extras.phoneList";
    public static final String RECEIVER_EXTRA_PHONE_DELETE_DATA = "com.foxykeep.datadroidpoc.extras.phoneDeleteData";
    public static final String RECEIVER_EXTRA_PHONE_ADD_EDIT_DATA = "com.foxykeep.datadroidpoc.extras.phoneAddEditData";
    public static final String RECEIVER_EXTRA_RSS_FEED_DATA = "com.foxykeep.datadroidpoc.extras.rssFeed";

    private MemoryProvider mMemoryProvider = MemoryProvider.getInstance();

    private PoCRequestManager(final Context context) {
        super(context, PoCService.class);
    }

    @Override
    protected void persistDataToMemory(Request request, int resultCode, Bundle resultData) {
        switch (request.getRequestType()) {
            case PoCService.WORKER_TYPE_CITY_LIST:
                mMemoryProvider.cityList = resultData
                        .getParcelableArrayList(RECEIVER_EXTRA_CITY_LIST);
                break;
            case PoCService.WORKER_TYPE_CRUD_SYNC_PHONE_LIST:
                mMemoryProvider.syncPhoneList = resultData
                        .getParcelableArrayList(RECEIVER_EXTRA_PHONE_LIST);
                break;
            case PoCService.WORKER_TYPE_CRUD_SYNC_PHONE_DELETE:
                mMemoryProvider.syncPhoneDeleteData = resultData
                        .getLongArray(RECEIVER_EXTRA_PHONE_DELETE_DATA);
                break;
            case PoCService.WORKER_TYPE_CRUD_SYNC_PHONE_ADD_EDIT:
                mMemoryProvider.syncPhoneAddedEditedPhone = resultData
                        .getParcelable(RECEIVER_EXTRA_PHONE_ADD_EDIT_DATA);
                break;
            case PoCService.WORKER_TYPE_RSS_FEED:
                mMemoryProvider.rssFeed = resultData
                        .getParcelable(RECEIVER_EXTRA_RSS_FEED_DATA);
        }
    }

    /**
     * Gets the list of persons and save it in the database.
     *
     * @param returnFormat 0 for XML, 1 for JSON.
     * @return The request.
     */
    public Request getPersonList(int returnFormat) {
        Request request = new Request(PoCService.WORKER_TYPE_PERSON_LIST);
        request.put(PersonListOperation.PARAM_RETURN_FORMAT, returnFormat);

        execute(request);

        return request;
    }


    /**
     * Gets the list of cities and save it in the memory provider.
     *
     * @return The request.
     */
    public Request getCityList() {
        Request request = new Request(PoCService.WORKER_TYPE_CITY_LIST);

        // Reset the cityList in the provider
        mMemoryProvider.cityList = null;

        // Execute the request
        execute(request);

        return request;
    }

    /**
     * Gets the list of phones synchronously and save it in the memory.
     *
     * @param userId the id of the user (generated by the application).
     * @return The request.
     */
    public Request getSyncPhoneList(String userId) {
        Request request = new Request(PoCService.WORKER_TYPE_CRUD_SYNC_PHONE_LIST);
        request.put(CrudSyncPhoneListOperation.PARAM_USER_ID, userId);

        // Reset the syncPhoneList in the provider
        mMemoryProvider.syncPhoneList = null;

        // Execute the request
        execute(request);

        return request;
    }

    /**
     * Delete a phone synchronously.
     *
     * @param userId the id of the user (generated by the application).
     * @param phoneIdList the list of phone ids to delete (comma separated).
     * @return The request.
     */
    public Request deleteSyncPhones(String userId, String phoneIdList) {
        Request request = new Request(PoCService.WORKER_TYPE_CRUD_SYNC_PHONE_DELETE);
        request.put(CrudSyncPhoneDeleteOperation.PARAM_USER_ID, userId);
        request.put(CrudSyncPhoneDeleteOperation.PARAM_PHONE_ID_LIST, phoneIdList);

        // Reset the syncPhoneDeleteData in the provider
        mMemoryProvider.syncPhoneDeleteData = null;

        // Execute the request
        execute(request);

        return request;
    }

    /**
     * Add a phone synchronously.
     *
     * @param userId the id of the user (generated by the application).
     * @param name the phone name.
     * @param manufacturer the phone manufacturer.
     * @param androidVersion the phone android version.
     * @param screenSize the phone screen size.
     * @param price the phone price.
     * @return The request.
     */
    public Request addSyncPhone(String userId, String name, String manufacturer,
            String androidVersion, double screenSize, int price) {
        return editSyncPhone(userId, -1, name, manufacturer, androidVersion, screenSize, price);
    }

    /**
     * Edit a phone synchronously.
     *
     * @param userId the id of the user (generated by the application).
     * @param phoneId the phone id.
     * @param name the phone new name.
     * @param manufacturer the phone new manufacturer.
     * @param androidVersion the phone new android version.
     * @param screenSize the phone new screen size.
     * @param price the phone new price.
     * @return The request.
     */
    public Request editSyncPhone(String userId, long phoneId, String name, String manufacturer,
            String androidVersion, double screenSize, int price) {
        Request request = new Request(PoCService.WORKER_TYPE_CRUD_SYNC_PHONE_ADD_EDIT);
        request.put(CrudSyncPhoneAddEditOperation.PARAM_USER_ID, userId);
        request.put(CrudSyncPhoneAddEditOperation.PARAM_PHONE_ID, phoneId);
        request.put(CrudSyncPhoneAddEditOperation.PARAM_NAME, name);
        request.put(CrudSyncPhoneAddEditOperation.PARAM_MANUFACTURER, manufacturer);
        request.put(CrudSyncPhoneAddEditOperation.PARAM_ANDROID_VERSION, androidVersion);
        request.put(CrudSyncPhoneAddEditOperation.PARAM_SCREEN_SIZE, screenSize);
        request.put(CrudSyncPhoneAddEditOperation.PARAM_PRICE, price);

        // Reset the syncPhoneEditedPhone in the provider
        mMemoryProvider.syncPhoneAddedEditedPhone = null;

        // Execute the request
        execute(request);

        return request;
    }

    /**
     * Gets the RSS feed of the given URL and save it in the memory.
     *
     * @param feedUrl the URL of the RSS feed.
     * @return The request.
     */
    public Request getRssFeed(String feedUrl) {
        Request request = new Request(PoCService.WORKER_TYPE_RSS_FEED);
        request.put(RssFeedOperation.PARAM_FEED_URL, feedUrl);

        // Reset the rssFeed in the provider
        mMemoryProvider.rssFeed = null;

        // Execute the request
        execute(request);

        return request;
    }
}
